PredNaive <- predict(NaiveModel, newdata = test, type = "raw")
PredNaive <- predict(NaiveModel, newdata = test[,-16], type = "raw")
View(PredNaive)
View(Predfit)
PredNaive <- predict(NaiveModel, newdata = test, type = "raw")
df = data.frame(pi=double(), tree_tpr=double(),
tree_fpr=double(), naive_tpr=double(),
naive_fpr=double())
for (pi in seq(0.05, 0.95, by=0.05)) {
pred_tree = as.data.frame(Predfit)
pred_naive = as.data.frame(PredNaive)
pi_tree = ifelse(pred_tree$yes > pi, "no", "yes")
pi_naive = ifelse(pred_naive$yes > pi, "no", "yes")
tree_table = table(test$y, factor(pi_tree, levels=c("no", "yes")))
naive_table = table(test$y, factor(pi_naive, levels=c("no", "yes")))
df = rbind(df, c(pi,tree_table[4]/(tree_table[4]+tree_table[2]),
tree_table[3]/(tree_table[3]+tree_table[1]),
naive_table[4]/(naive_table[4]+naive_table[2]),
naive_table[3]/(naive_table[3]+naive_table[1])
))
}
colnames(df) = c("pi", "tpr_tree", "fpr_tree", "tpr_naive", "fpr_naive")
plot(-1, -1, xlim=c(0, 1), ylim=c(0, 1), xlab="FPR", ylab="TPR",
main="ROC curve for Naive Bayes vs Tree model")
plot(-1, -1, xlim=c(0, 1), ylim=c(0, 1), xlab="FPR", ylab="TPR",
main="ROC curve for Naive Bayes vs Tree model")
lines(df$fpr_tree, df$tpr_tree, lwd=1, col="blue")
lines(df$fpr_naive, df$tpr_naive, lwd=1, col="red")
legend("bottomright", c("Tree", "Naive"), col=c("blue", "red"), lwd=10)
plot(-1, -1, xlim=c(0, 1), ylim=c(0, 1), xlab="FPR", ylab="TPR",
main="ROC curve for Naive Bayes vs Tree model")
lines(df$tpr_tree, df$fpr_tree, lwd=1, col="blue")
lines(df$tpr_naive, df$fpr_naive, lwd=1, col="red")
legend("bottomright", c("Tree", "Naive"), col=c("blue", "red"), lwd=10)
plot(-1, -1, xlim=c(0, 1), ylim=c(0, 1), xlab="FPR", ylab="TPR",
main="ROC curve for Naive Bayes vs Tree model")
lines(df$tpr_tree, df$fpr_tree, lwd=1, col="blue")
lines(df$tpr_naive, df$fpr_naive, lwd=1, col="red")
legend("bottomright", c("Optimal Tree", "Naive Bayes"), col=c("blue", "red"), lwd=10)
?read.csv
communities <- read.csv("communities.csv", header = TRUE)
View(communities)
?eigen
comm_data <- scale(communities[,-1])
comm_data
comm_data <- as.data.frame(scale(communities[,-1]))
comm_data
View(comm_data)
comm_data$ViolentCrimesPerPop <- communities$ViolentCrimesPerPop
comm_data
View(comm_data)
View(comm_data)
eigen(comm_data)
comm_data <- scale(communities[,-1])
comm_data$ViolentCrimesPerPop <- communities$ViolentCrimesPerPop
communities <- read.csv("communities.csv", header = TRUE)
View(communities)
communities[,1:100]
comm_data <- scale(communities[,1:100])
View(comm_data)
communities[1:100]
communities[1:100] <- lapply(communities[1:100], function(x) c(scale(x)))
View(communities)
View(communities)
communities <- read.csv("communities.csv", header = TRUE)
View(communities)
communities[1:100] <- lapply(communities[1:100], function(x) c(scale(x)))
eigen(communities[1:100])
covariance <- cov(communities[1:100])
ev <- eigen(covariance)
ev$values
ev$vectors
ev$values
print(ev$values/sum(ev$values)*100)
plot(ev$vectors, type = "l")
points(communities)
prcomp(communities[1:100])
communities <- read.csv("communities.csv", header = TRUE)
comm1 <- scale(communities[1:100])
covariance <- cov(comm1)
ev <- eigen(covariance)
ev$values
print(ev$values/sum(ev$values)*100)
lambda <- ev$values
print(lambda/sum(lambda)*100)
#proportion of variation
sprintf("%2.3f",lambda/sum(lambda)*100)
#proportion of variation
sprintf("%2.3f",cumsum(lambda)/sum(lambda)*100)
plot(ev$vectors, type = "l")
points(communities[1:100])
#variation proportion by each of the first two principal components
l <- lambda/sum(lambda)
1[1:2]
l[1:2]
#variation proportion by each of the first two principal components
l <- cumsum(lambda)/sum(lambda)
l[1:2]
library(ggplot2)
?princomp
a <- princomp(communities[1:100])
a
a <- princomp(communities[1:100], scores = TRUE)
a
a$scores
library(ggplot2)
a <- princomp(communities[1:100], scores = TRUE)
a$scores
a$scores[,1]
plot(a$scores[,1])
#score plot of the first principal component
plot(a$scores[,1], ylim=c(-5,15))
#score plot of the first principal component
plot(a$scores[,1])
p1 <- ggplot(communities, aes(x=a$scores[,1], y=a$scores[,2]), col = communities$ViolentCrimesPerPop)
p1
communities <- read.csv("communities.csv", header = TRUE)
View(communities)
#communities[1:100] <- lapply(communities[1:100], function(x) c(scale(x)))
comm1 <- scale(communities[1:100])
comm2 <- communities$ViolentCrimesPerPop
covariance <- cov(comm1)
ev <- eigen(covariance)
lambda <- ev$values
print(lambda/sum(lambda)*100)
#proportion of variation
sprintf("%2.3f",cumsum(lambda)/sum(lambda)*100)
a <- princomp(comm1, scores = TRUE)
a$scores
#score plot of the first principal component
plot(a$scores[,1])
p1 <- ggplot(comm1, aes(x=a$scores[,1], y=a$scores[,2]), col = comm2)
plot(abs(a$scores[,1]))
plot(abs(a$loadings[,1]))
communities <- read.csv("communities.csv", header = TRUE)
comm1 <- scale(communities[1:100])
comm2 <- communities$ViolentCrimesPerPop
a <- princomp(comm1)
a$loadings
#score plot of the first principal component
plot(a$loadings[,1])
plot(abs(a$loadings[,1]))
#top 5 features contributing to PC1
features <- sort(abs(a$loadings[,1]), decreasing = TRUE)
data <- a$scores
data[,"Crimes"] <- comm2
View(data)
p1 <- ggplot(comm1, aes(x=data[,1], y=data[,2]), col = comm2)
install.packages("fortify")
library(fortify)
install.packages("ggfortify")
library(ggfortify)
data <- data.frame( PC1 = a$scores[,1],
PC2 = a$scores[,2],
Crimes = comm2)
data
p1 <- ggplot(comm1, aes(x=data[,1], y=data[,2]), col = Crimes) + geom_point()
p1
ModelPlot <- function(){
fitted <- rep(0,2)
for (i in 1:2) {
model <- lm(Crimes~poly(PC1,i), data = data)
fitted_m <- predict(model)
}
plot(seq(1:2), fitted_m, col = "red", ylim = c(20,50), ylab = "MSE", xlab = "degree of polynomial")
points(seq(1:6), validation_MSE, col = "blue")
}
ModelPlot()
ModelPlot <- function(){
fitted <- rep(0,2)
for (i in 1:2) {
model <- lm(Crimes~poly(PC1,i), data = data)
fitted_m <- predict(model)
}
plot(seq(1:2), fitted_m, col = "red", ylim = c(20,50), ylab = "MSE", xlab = "degree of polynomial")
#points(seq(1:2), validation_MSE, col = "blue")
}
ModelPlot()
model <- lm(Crimes~poly(PC1,2), data = data)
fitted_m <- predict(model)
fitted_m
df <- data.frame(a$scscores)
df$Crimes <- comm2
df[,"Crimes"] <- comm2
df[,"Crimes"] <- communities$ViolentCrimesPerPop
df
df <- data.frame(a$scores)
df[,"Crimes"] <- communities$ViolentCrimesPerPop
#fit second order poynomial to PC1 and crimes
data
p2 <- lm(Crimes~poly(PC1,2), data = data)
p2
data[,"Fitted"] <- predict(p2)
#plot of target vs feature and predicted values
P1 <- ggplot(data, aes(PC1)) +
geom_point(aes(y=Crimes), color = "black") +
geom_point(aes(y=Fitted), color = "red")
P1
P2 <- ggplot(data, aes(PC1, Crimes)) +
geom_point(aes(y=Fitted), color = "red")
P2
P2 <- ggplot(data, aes(PC1, Crimes), color = "black") +
geom_point(aes(y=Fitted), color = "red")
P2
P2 <- ggplot(data, aes(x=PC1, y=Crimes), color = "black") +
geom_point(aes(y=Fitted), color = "red")
P2
P1 <- ggplot(data, aes(PC1)) +
geom_point(aes(y=Crimes), color = "black") +
geom_point(aes(y=Fitted), color = "red")
P1
P2 <- ggplot(data, aes(x=PC1, y=Crimes), color = "black") +
geom_point(aes(y=Fitted), color = "red")
P2
#fit second order poynomial to PC1 and crimes
data
p2 <- lm(Crimes~poly(PC1,2), data = data)
p2
data[,"Fitted"] <- predict(p2)
#plot of target vs feature and predicted values
P1 <- ggplot(data, aes(PC1)) +
geom_point(aes(y=Crimes), color = "black") +
geom_point(aes(y=Fitted), color = "red")
P1
#fit second order poynomial to PC1 and crimes
data
p2 <- lm(Crimes~poly(PC1,2), data = data)
p2
data[,"Fitted"] <- predict(p2, newdata = data)
#plot of target vs feature and predicted values
P1 <- ggplot(data, aes(PC1)) +
geom_point(aes(y=Crimes), color = "black") +
geom_point(aes(y=Fitted), color = "red")
P1
data$Fitted
nrow(PC1)
nrow(data$PC1)
nrow(data$PC1)
length(data$PC1)
mle <- p2
mle
#For Prediction bands
fun2_pred <- function(data){
p2 <- lm(Crimes~poly(PC1,2), data = data)
pred <- predict(p2, newdata = data)
return(rnorm(length(data$PC1), pred, sd(mle$residuals)))
}
rng <- function(data, model){
sample <- data.frame(Crimes = data$Crimes, PC1 = data$PC1 )
fitted_value = predict(model, sample)
sample$Crimes = rnorm(length(data$PC1), fitted_value, sd(mle$residuals))
return(sample)
}
set.seed(12345)
confidence <- boot(data, statistic = fun1_conf, R = 1000, mle = p2, ran.gen = rng,
sim = "parametric")
library(boot)
confidence <- boot(data, statistic = fun1_conf, R = 1000, mle = p2, ran.gen = rng,
sim = "parametric")
#For Confidence bands
fun1_conf <- function(data){
p2 <- lm(Crimes~poly(PC1,2), data = data)
pred <- predict(p2, newdata = data)
return(pred)
}
#For Prediction bands
fun2_pred <- function(data){
p2 <- lm(Crimes~poly(PC1,2), data = data)
pred <- predict(p2, newdata = data)
return(rnorm(length(data$PC1), pred, sd(mle$residuals)))
}
rng <- function(data, model){
sample <- data.frame(Crimes = data$Crimes, PC1 = data$PC1 )
fitted_value = predict(model, sample)
sample$Crimes = rnorm(length(data$PC1), fitted_value, sd(mle$residuals))
return(sample)
}
set.seed(12345)
library(boot)
confidence <- boot(data, statistic = fun1_conf, R = 1000, mle = p2, ran.gen = rng,
sim = "parametric")
confidence <- boot(data, statistic = fun1_conf, R = 100, mle = p2, ran.gen = rng,
sim = "parametric")
conf_bands <- envelope(confidence)
conf_bands
confidence <- boot(data, statistic = fun1_conf, R = 100, mle = mle, ran.gen = rng,
sim = "parametric")
conf_bands <- envelope(confidence)
conf_bands
conf_bands$point[1,]
prediction <- boot(data, statistic = fun2_pred, R = 100, mle = mle, ran.gen = rng,
sim = "parametric")
pred_bands <- envelope(prediction)
plot_data <- data.frame(Crimes = data$Crimes, PC1 = data$PC1, fitted_value,
upper_c = conf_bands$point[1,], lower_c = conf_bands$point[2,],
upper_p = pred_bands$point[1,], lower_p = pred_bands$point[2,])
fitted_value
mle <- p2
#For Confidence bands
fun1_conf <- function(data){
p2 <- lm(Crimes~poly(PC1,2), data = data)
pred <- predict(p2, newdata = data)
return(pred)
}
#For Prediction bands
fun2_pred <- function(data){
p2 <- lm(Crimes~poly(PC1,2), data = data)
fitted_value <- predict(p2, newdata = data)
return(rnorm(length(data$PC1), fitted_value, sd(mle$residuals)))
}
rng <- function(data, model){
sample <- data.frame(Crimes = data$Crimes, PC1 = data$PC1 )
fitted_value = predict(model, sample)
sample$Crimes = rnorm(length(data$PC1), fitted_value, sd(mle$residuals))
return(sample)
}
set.seed(12345)
library(boot)
confidence <- boot(data, statistic = fun1_conf, R = 100, mle = mle, ran.gen = rng,
sim = "parametric")
conf_bands <- envelope(confidence)
prediction <- boot(data, statistic = fun2_pred, R = 100, mle = mle, ran.gen = rng,
sim = "parametric")
pred_bands <- envelope(prediction)
plot_data <- data.frame(Crimes = data$Crimes, PC1 = data$PC1, fitted_value,
upper_c = conf_bands$point[1,], lower_c = conf_bands$point[2,],
upper_p = pred_bands$point[1,], lower_p = pred_bands$point[2,])
plot_data <- data.frame(Crimes = data$Crimes, PC1 = data$PC1, data$Fitted,
upper_c = conf_bands$point[1,], lower_c = conf_bands$point[2,],
upper_p = pred_bands$point[1,], lower_p = pred_bands$point[2,])
p3 <- ggplot(plot_data, aes(Crimes, PC1, upper_c, lower_c, upper_p, lower_p)) +
geom_line(aes(PC1, fitted_value))+ geom_point(aes(PC1, Crimes), col = "blue") +                     geom_line(aes(PC1, upper_c), col = "red") + geom_line(aes(PC1, lower_c), col = "red")
p3
plot_data$data.Fitted
p3 <- ggplot(plot_data, aes(Crimes, PC1, upper_c, lower_c, upper_p, lower_p)) +
geom_line(aes(PC1, data.Fitted))+ geom_point(aes(PC1, Crimes), col = "blue") +                     geom_line(aes(PC1, upper_c), col = "red") + geom_line(aes(PC1, lower_c), col = "red")
p3
p4 <- ggplot(plot_data, aes(Crimes, PC1, fitted_value, upper_c, lower_c, upper_p, lower_p)) +             geom_line(aes(PC1, data.Fitted))+ geom_point(aes(PC1, Crimes), col = "blue") +                     geom_line(aes(PC1, upper_p), col = "red") + geom_line(aes(PC1, lower_p), col = "red")
p4
communities <- read.csv("communities.csv", header = TRUE)
View(communities)
#communities[1:100] <- lapply(communities[1:100], function(x) c(scale(x)))
comm1 <- scale(communities[1:100])
comm2 <- communities$ViolentCrimesPerPop
covariance <- cov(comm1)
ev <- eigen(covariance)
lambda <- ev$values
print(lambda/sum(lambda)*100)
#proportion of variation
sprintf("%2.3f",cumsum(lambda)/sum(lambda)*100)
library(ggplot2)
a <- princomp(comm1)
#score plot of the first principal component
plot(a$loadings[,1])
#top 5 features contributing to PC1
features <- sort(abs(a$loadings[,1]), decreasing = TRUE)
data <- data.frame( PC1 = a$scores[,1],
PC2 = a$scores[,2],
Crimes = comm2)
data
#Plot of PC scores in the coordinates(PC1, PC2) in which color of the points is given by ViolentCrimesPerPop
library(ggfortify)
p1 <- ggplot(comm1, aes(x=data[,1], y=data[,2]), col = Crimes) + geom_point()
p1
#fit second order poynomial to PC1 and crimes
data
p2 <- lm(Crimes~poly(PC1,2), data = data)
p2
data[,"Fitted"] <- predict(p2, newdata = data)
#plot of target vs feature and predicted values
P1 <- ggplot(data, aes(PC1)) +
geom_point(aes(y=Crimes), color = "black") +
geom_point(aes(y=Fitted), color = "red")
P1
mle <- p2
#For Confidence bands
fun1_conf <- function(data){
p2 <- lm(Crimes~poly(PC1,2), data = data)
pred <- predict(p2, newdata = data)
return(pred)
}
#For Prediction bands
fun2_pred <- function(data){
p2 <- lm(Crimes~poly(PC1,2), data = data)
fitted_value <- predict(p2, newdata = data)
return(rnorm(length(data$PC1), fitted_value, sd(mle$residuals)))
}
rng <- function(data, model){
sample <- data.frame(Crimes = data$Crimes, PC1 = data$PC1 )
fitted_value = predict(model, sample)
sample$Crimes = rnorm(length(data$PC1), fitted_value, sd(mle$residuals))
return(sample)
}
set.seed(12345)
library(boot)
confidence <- boot(data, statistic = fun1_conf, R = 100, mle = mle, ran.gen = rng,
sim = "parametric")
conf_bands <- envelope(confidence)
prediction <- boot(data, statistic = fun2_pred, R = 100, mle = mle, ran.gen = rng,
sim = "parametric")
pred_bands <- envelope(prediction)
#Calculating the points for the bands
data[,"cmax"] = conf_bands$point[1,]
data[,"cmin"] = conf_bands$point[2,]
data[,"pmax"] = conf_bands$point[1,]
data[,"pmin"] = conf_bands$point[2,]
#Plotting with confidence and prediction intervals on the plot from task 3
ggplot(data, aes(x=PC1)) +
geom_ribbon(aes(ymin=pmin, ymax=pmax), color="darkgreen", fill="green", alpha=0.3) +
geom_ribbon(aes(ymin=cmin, ymax=cmax), color="darkblue", fill="blue", alpha=0.5) +
geom_point(aes(y=Crimes), color="black") +
geom_line(aes(y=Fitted), color="red", size=0.7)
View(data)
ggplot(data, aes(x=PC1)) +
geom_ribbon(aes(ymin=pmin, ymax=pmax), color="darkgreen", fill="green", alpha=0.3) +
geom_ribbon(aes(ymin=cmin, ymax=cmax), color="darkblue", fill="blue", alpha=0.5) +
geom_point(aes(y=Crimes), color="black") +
geom_line(aes(y=Fitted), color="red", size=0.7)
ggplot(data, aes(x=PC1)) +
geom_ribbon(aes(ymin=pmin, ymax=pmax), color="darkgreen", alpha=0.3) +
geom_ribbon(aes(ymin=cmin, ymax=cmax), color="darkblue", alpha=0.5) +
geom_point(aes(y=Crimes), color="black") +
geom_line(aes(y=Fitted), color="red", size=0.7)
ggplot(data, aes(x=PC1)) +
geom_ribbon(aes(ymin=pmin, ymax=pmax), color="darkgreen", fill="green", alpha=0.3) +
geom_ribbon(aes(ymin=cmin, ymax=cmax), color="darkblue", fill="blue", alpha=0.5) +
geom_point(aes(y=Crimes), color="black") +
geom_line(aes(y=Fitted), color="red", size=0.7)
ggplot(data, aes(x=PC1)) +
geom_line(aes(ymin=pmin, ymax=pmax), color="darkgreen", fill="green", alpha=0.3) +
geom_line(aes(ymin=cmin, ymax=cmax), color="darkblue", fill="blue", alpha=0.5) +
geom_point(aes(y=Crimes), color="black") +
geom_line(aes(y=Fitted), color="red", size=0.7)
ggplot(data, aes(PC1, cmin, cmax, pmin, pmax)) +
geom_ribbon(aes(ymin=pmin, ymax=pmax), color="darkgreen", fill="green", alpha=0.3) +
geom_ribbon(aes(ymin=cmin, ymax=cmax), color="darkblue", fill="blue", alpha=0.5) +
geom_point(aes(y=Crimes), color="black") +
geom_line(aes(y=Fitted), color="red", size=0.7)
plot_data <- data.frame(Crimes = data$Crimes, PC1 = data$PC1, data$Fitted,
upper_c = conf_bands$point[1,], lower_c = conf_bands$point[2,],
upper_p = pred_bands$point[1,], lower_p = pred_bands$point[2,])
p3 <- ggplot(plot_data, aes(Crimes, PC1, upper_c, lower_c, upper_p, lower_p)) +
geom_line(aes(PC1, data.Fitted))+ geom_point(aes(PC1, Crimes), col = "blue") +                     geom_line(aes(PC1, upper_c), col = "red") + geom_line(aes(PC1, lower_c), col = "red")
p3
p4 <- ggplot(plot_data, aes(Crimes, PC1, fitted_value, upper_c, lower_c, upper_p, lower_p)) +             geom_line(aes(PC1, data.Fitted))+ geom_point(aes(PC1, Crimes), col = "blue") +                     geom_line(aes(PC1, upper_p), col = "red") + geom_line(aes(PC1, lower_p), col = "red")
p4
p3 <- ggplot(plot_data, aes(Crimes, PC1, upper_c, lower_c, upper_p, lower_p)) +
geom_line(aes(PC1, data.Fitted))+ geom_point(aes(PC1, Crimes), col = "blue") +                     geom_line(aes(PC1, upper_c), col = "red") + geom_line(aes(PC1, lower_c), col = "red")
p3
p4 <- ggplot(plot_data, aes(Crimes, PC1, fitted_value, upper_c, lower_c, upper_p, lower_p)) +             geom_line(aes(PC1, data.Fitted))+ geom_point(aes(PC1, Crimes), col = "blue") +                     geom_line(aes(PC1, upper_p), col = "red") + geom_line(aes(PC1, lower_p), col = "red")
p4
subplot(p1, p3, p4)
p4 <- ggplot(plot_data, aes(Crimes, PC1, fitted_value, upper_c, lower_c, upper_p, lower_p)) +             geom_line(aes(PC1, data.Fitted))+ geom_point(aes(PC1, Crimes), col = "blue") +                     geom_line(aes(PC1, upper_p), col = "red") + geom_line(aes(PC1, lower_p), col = "red")
p4 <- ggplot(plot_data, aes(Crimes, PC1, fitted_value, upper_c, lower_c, upper_p, lower_p)) +             geom_line(aes(PC1, data.Fitted))+ geom_point(aes(PC1, Crimes), col = "blue") +                     geom_line(aes(PC1, upper_p), col = "green") + geom_line(aes(PC1, lower_p), col = "green")
p4
p4 <- ggplot(plot_data, aes(Crimes, PC1, fitted_value, upper_c, lower_c, upper_p, lower_p)) +             geom_line(aes(PC1, data.Fitted))+ geom_point(aes(PC1, Crimes), col = "black") +                     geom_line(aes(PC1, upper_p), col = "green") + geom_line(aes(PC1, lower_p), col = "green")
p4
p3 <- ggplot(plot_data, aes(Crimes, PC1, upper_c, lower_c, upper_p, lower_p)) +
geom_line(aes(PC1, data.Fitted))+ geom_point(aes(PC1, Crimes), col = "blue") +                     geom_line(aes(PC1, upper_c), col = "red") + geom_line(aes(PC1, lower_c), col = "red")
p3
p4 <- ggplot(plot_data, aes(Crimes, PC1, fitted_value, upper_c, lower_c, upper_p, lower_p)) +             geom_line(aes(PC1, data.Fitted))+ geom_point(aes(PC1, Crimes), col = "black") +                     geom_line(aes(PC1, upper_p), col = "green") + geom_line(aes(PC1, lower_p), col = "green")
p4
p3 <- ggplot(plot_data, aes(Crimes, PC1, upper_c, lower_c, upper_p, lower_p)) +
geom_line(aes(PC1, data.Fitted))+ geom_point(aes(PC1, Crimes), col = "blue") +                     geom_line(aes(PC1, upper_c), col = "red") + geom_line(aes(PC1, lower_c), col = "red")
p3
p4 <- ggplot(plot_data, aes(Crimes, PC1, fitted_value, upper_c, lower_c, upper_p, lower_p)) +             geom_line(aes(PC1, data.Fitted))+ geom_point(aes(PC1, Crimes), col = "black") +                     geom_line(aes(PC1, upper_p), col = "green") + geom_line(aes(PC1, lower_p), col = "green") +
geom_line(aes(PC1, upper_c), col = "red") + geom_line(aes(PC1, lower_c), col = "red")
p4
p3 <- ggplot(plot_data, aes(Crimes, PC1, upper_c, lower_c, upper_p, lower_p)) +
geom_line(aes(PC1, data.Fitted))+ geom_point(aes(PC1, Crimes), col = "black") +                     geom_line(aes(PC1, upper_c), col = "red") + geom_line(aes(PC1, lower_c), col = "red")
p3
p4 <- ggplot(plot_data, aes(Crimes, PC1, fitted_value, upper_c, lower_c, upper_p, lower_p)) +             geom_line(aes(PC1, data.Fitted))+ geom_point(aes(PC1, Crimes), col = "black") +                     geom_line(aes(PC1, upper_p), col = "green") + geom_line(aes(PC1, lower_p), col = "green") +
geom_line(aes(PC1, upper_c), col = "red") + geom_line(aes(PC1, lower_c), col = "red")
p4
data("iris")
attach(iris)
head(iris)
setwd("C:/Users/TEJASHREE/Desktop/teju/Period 2/Machine Learning/Lab Assignments/Block1/Lab2/New Lab")
?pooled covariance
data("iris")
data("iris")
attach(iris)
plot(x=Sepal.Length, y=Sepal.Width, main = "Scatterplot", xlab = "Sepal Length", ylab = "Sepal width", pch = 19, col = c("green","blue","red")[Species])
legend("topright",legend = c("Setosa", "Versicolor", "Virginica"),
col=c("green", "blue", "red"), pch = 16, bty="n", pt.cex = 2,text.col = "black", cex=0.8)
library(MASS)
library(dplyr)
#mean per class
aggregate(cbind(Sepal.Length, Sepal.Width) ~ Species, data = iris, mean)
#covariance matrices per class
lapply(split(iris[,c(1,2)],iris$Species),cov)
#prior probabilities per class
Model <- lda(Species~., data = iris)
Model$prior
species_split <- split(iris[,1:2], iris$Species)
species_split
x_versicolor <- species_split$versicolor
x_virginica <- species_split$virginica
mu_setosa <- colMeans(x_setosa)
x_setosa <- species_split$setosa
mu_setosa <- colMeans(x_setosa)
mu_versicolor <- colMeans(x_versicolor)
mu_virginica <- colMeans(x_virginica)
length(x_setosa)
nrow(x_setosa)
sum(x_setosa)
m_setosa <- sum(x_setosa)/nrow(x_setosa)
m_setosa
m_setosa <- sum(x_setosa[,1])/nrow(x_setosa)
m_setosa
m_setosa <- sum(x_setosa[,1],x_setosa[,2])/nrow(x_setosa)
m_setosa
