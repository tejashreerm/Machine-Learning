d <- dist(mtcars)
fit <- cmdscale(d,eig=TRUE, k=2)
fit
x <- fit$points[,1]
y <- fit$points[,2]
p<-plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Metric MDS", type="n") + stat_density_2d(geom = "raster", aes(fill = coordsMDS), contour = FALSE)
p<-plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Metric MDS", type="n") + stat_density_2d(geom = "raster", aes(fill = coordsMDS), contour = FALSE)
text(x, y, labels = row.names(mtcars), cex=.7)
p<-ggplot(mtcars, aes(x=fit$points[,1], y=fit$points[,2])) + stat_density_2d(geom = "raster", aes(fill = ..density..), contour = FALSE) + ggtitle("2d density plot")+xlab("") + ylab("")
p
p1 <- ggplot(mtcars, aes(x=fit$points[,1], y=fit$points[,2])) + stat_density2d(aes(fill = stat(density)), geom = "raster",
contour = FALSE) + geom_density_2d(aes(num, loss), data=data1) + theme_minimal() +
facet_wrap(~age_gr, labeller = "label_both") + scale_fill_viridis_c()
p1 <- ggplot(mtcars, aes(x=fit$points[,1], y=fit$points[,2])) + stat_density2d(aes(fill = stat(density)), geom = "raster",
contour = FALSE) + geom_density_2d(aes(num, loss), data=mtcars) + theme_minimal() +
facet_wrap(~age_gr, labeller = "label_both") + scale_fill_viridis_c()
p1
p1 <- ggplot(mtcars, aes(x=fit$points[,1], y=fit$points[,2])) + stat_density2d(aes(fill = stat(density)), geom = "raster",
contour = FALSE) + geom_density_2d(aes(num, loss), data=mtcars) + theme_minimal() +
facet_wrap(~name, labeller = "label_both") + scale_fill_viridis_c()
p1
View(fit)
View(fit)
p1 <- ggplot(mtcars, aes(x=fit$points[,1], y=fit$points[,2])) + stat_density2d(aes(fill = stat(density)), geom = "raster",
contour = FALSE) + geom_density_2d(aes(num, loss), data=mtcars) + theme_minimal() +
scale_fill_viridis_c()
p1
p1 <- ggplot(mtcars, aes(x=fit$points[,1], y=fit$points[,2])) + stat_density2d(aes(fill = stat(density)), geom = "raster",
contour = FALSE) + geom_density_2d(aes(x=fit$points[,1], y=fit$points[,2]), data=mtcars) + theme_minimal() +
scale_fill_viridis_c()
p1
library(ggplot2)
d <- dist(mtcars)
fit <- cmdscale(d,eig=TRUE, k=2)
fit
x <- fit$points[,1]
y <- fit$points[,2]
p1 <- ggplot(mtcars, aes(x=fit$points[,1], y=fit$points[,2])) + stat_density2d(aes(fill = stat(density)), geom = "raster",
contour = FALSE) + geom_density_2d(aes(x=fit$points[,1], y=fit$points[,2]), data=mtcars) + theme_minimal() +
scale_fill_viridis_c()
p1
library(ggplot2)
d <- dist(mtcars)
fit <- cmdscale(d, k=2)
fit
x <- fit$points[,1]
fit
x <- fit[,1]
y <- fit[,2]
p1 <- ggplot(mtcars, aes(x=fit$points[,1], y=fit$points[,2])) + stat_density2d(aes(fill = stat(density)), geom = "raster",
contour = FALSE) + geom_density_2d(aes(x=fit$points[,1], y=fit$points[,2]), data=mtcars) + theme_minimal() +
scale_fill_viridis_c()
p1
p1 <- ggplot(mtcars, aes(x=fit[,1], y=fit[,2])) + stat_density2d(aes(fill = stat(density)), geom = "raster",
contour = FALSE) + geom_density_2d(aes(x=fit[,1], y=fit[,2]), data=mtcars) + theme_minimal() +
scale_fill_viridis_c()
p1
?cmdscale
cords <- cmdscale(d, k=2)
cords
library(ggplot2)
d <- dist(mtcars)
cords <- cmdscale(d, k=2)
cords
x <- cords[,1]
y <- cords[,2]
p1 <- ggplot(mtcars, aes(x=cords[,1], y=cords[,2])) + stat_density2d(aes(fill = stat(density)), geom = "raster",
contour = FALSE) + geom_density_2d(aes(x=cords[,1], y=cords[,2]), data=mtcars) + theme_minimal() +
scale_fill_viridis_c()
p1
library(shiny)
library(shiny)
library(ggplot2)
c <- ggplot(mtcars, aes(x = hp, y = disp)) +
geom_point(aes(color = factor(cyl)))
c
c <- ggplot(mtcars, aes(x = hp, y = disp)) +
geom_point(aes(color = factor(cyl))) +
geom_smooth(method = "lm")
c
c <- ggplot(mtcars, aes(x = hp, y = disp)) +
geom_point(aes(color = factor(cyl))) +
geom_smooth(method = "lm", se = "FALSE")
c
c <- ggplot(mtcars, aes(x = hp, y = disp)) +
geom_point(aes(color = factor(cyl))) +
geom_smooth(method = lm)
c
c <- ggplot(mtcars, aes(x = hp, y = disp)) +
geom_point(aes(color = factor(cyl))) +
geom_smooth(method = lm, se = FALSE)
c
View(mtcars)
num<-c(1,2,3,4,5)
let<-c("A","B","C","D","E")
date<-c("2015-5-1","2015-6-1","2015-7-1","2015-8-1","2015-9-1")
df <- data.frame(num,let,date)
ui <- fluidPage(
titlePanel(title=h4("Races", align="center")),
sidebarPanel(
sliderInput("num", "Number:",min = 0, max = 5,step=1,value=c(1,2))),
mainPanel(plotOutput("plot2")))
server <- function(input,output){
dat <- reactive({
test <- df[df$num %in% seq(from=min(input$num),to=max(input$num),by=1),]
print(test)
test
})
output$plot2<-renderPlot({
ggplot(mtcars, aes(x = hp, y = disp)) +
geom_point(aes(color = factor(cyl))) +
geom_smooth(method = lm, se = FALSE)},height = 400,width = 600)}
shinyApp(ui, server)
num<-c(4,5,6,7,8,9)
let<-c("A","B","C","D","E")
date<-c("2015-5-1","2015-6-1","2015-7-1","2015-8-1","2015-9-1")
df <- data.frame(num,let,date)
num<-c(4,5,6,7,8)
let<-c("A","B","C","D","E")
date<-c("2015-5-1","2015-6-1","2015-7-1","2015-8-1","2015-9-1")
df <- data.frame(num,let,date)
ui <- fluidPage(
titlePanel(title=h4("Races", align="center")),
sidebarPanel(
sliderInput("num", "Number:",min = 0, max = 8,step=1,value=c(1,2))),
mainPanel(plotOutput("plot2")))
server <- function(input,output){
dat <- reactive({
test <- df[df$num %in% seq(from=min(input$num),to=max(input$num),by=1),]
print(test)
test
})
output$plot2<-renderPlot({
ggplot(mtcars, aes(x = hp, y = disp)) +
geom_point(aes(color = factor(cyl))) +
geom_smooth(method = lm, se = FALSE)},height = 400,width = 600)}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel(title=h4("Races", align="center")),
sidebarPanel(
sliderInput("num", "Number:",min = 4, max = 8,step=1,value=c(1,2))),
mainPanel(plotOutput("plot2")))
server <- function(input,output){
dat <- reactive({
test <- df[df$num %in% seq(from=min(input$num),to=max(input$num),by=1),]
print(test)
test
})
output$plot2<-renderPlot({
ggplot(mtcars, aes(x = hp, y = disp)) +
geom_point(aes(color = factor(cyl))) +
geom_smooth(method = lm, se = FALSE)},height = 400,width = 600)}
shinyApp(ui, server)
setwd("C:/Users/TEJASHREE/Desktop/teju/Period 1/Visualization/Prudhvi/today's exam")
p <- ggplot(mtcars, aes(interaction(cyl, drat, wt), fill = row.names(mtcars))) + geom_boxplot(width
=0.2, outlier.color="black")
#library(shiny)
ui <- fluidPage(
sliderInput(inputId="ws", label="Choose bandwidth size", value=0.01, min=0.1, max=1),
plotOutput("densPlot")
)
server <- function(input, output) {
output$densPlot <- renderPlot({
ggplot(mtcars, aes(x = hp, y = disp)) +
geom_point(aes(color = factor(cyl))) +
geom_smooth(method = lm, se = FALSE)
})
}
# Run the application
shinyApp(ui = ui, server = server)
#library(shiny)
ui <- fluidPage(
sliderInput(inputId="ws", label="Choose bandwidth size", value=1, min=4, max=8),
plotOutput("densPlot")
)
server <- function(input, output) {
output$densPlot <- renderPlot({
ggplot(mtcars, aes(x = hp, y = disp)) +
geom_point(aes(color = factor(cyl))) +
geom_smooth(method = lm, se = FALSE)
})
}
# Run the application
shinyApp(ui = ui, server = server)
load("C:/Users/TEJASHREE/Desktop/TimeSeries/monthlydata (1).Rdata")
knitr::opts_chunk$set(echo = TRUE)
# Q2 60 marks
autoplot(ts(xt, frequency = 1)) +
ylab("Price of Chicken") +xlab("Year") +
ggtitle("Price of Chicken vs. Years")
install.packages("astsa")
install.packages("fpp2")
library("astsa")
library("fpp2")
# Q2 60 marks
autoplot(ts(xt, frequency = 1)) +
ylab("Price of Chicken") +xlab("Year") +
ggtitle("Price of Chicken vs. Years")
log_chicken <- log(chicken)
autoplot(ts(log_chicken, start = 1924, frequency = 1)) +
ylab("Price of Chicken") +xlab("Year") +
ggtitle("Price of Log Chicken vs. Years")
# Q2 60 marks
autoplot(ts(xt, frequency = 1)) +
ylab("Price of xt") +xlab("Year") +
ggtitle("Price of xt vs. Years")
log_xt <- log(xt)
autoplot(ts(log_xt, frequency = 1)) +
ylab("Price of xt") + xlab("Year") +
ggtitle("Price of Log xt vs. Years")
# Q2 60 marks
autoplot(ts(xt, frequency = 1)) +
ylab("Price of xt") +xlab("Year") +
ggtitle("Price of xt vs. Years")
autoplot(ts(xt, frequency = 1)) +
ylab("Price of xt") +xlab("Year") +
ggtitle("Price of xt vs. Years")
log_xt <- log(xt)
autoplot(ts(log_xt, frequency = 1)) +
ylab("Price of xt") + xlab("Year") +
ggtitle("Price of Log xt vs. Years")
library("astsa")
library("fpp2")
# Q2 60 marks
autoplot(ts(xt, frequency = 1)) +
ylab("Price of xt") +xlab("Year") +
ggtitle("Price of xt vs. Years")
log_xt <- log(xt)
autoplot(ts(log_xt, frequency = 1)) +
ylab("Price of xt") + xlab("Year") +
ggtitle("Price of Log xt vs. Years")
ggPacf(log_chicken) + ggtitle("PACF for xt")
ggAcf(log_chicken) + ggtitle("ACF for xt")
# Since ACF is weird too many components suggests that there is AR component, looking at PACF confirms this. implies that ARMA(1,0) will be good
# doing one diff to remove trend
ggPacf(diff(log_xt, 1)) + ggtitle("PACF for xt")
ggAcf(diff(log_xt,1)) + ggtitle("ACF for xt")
autoplot(ts(diff(log_xt,1), frequency = 1)) +
ylab("Price of xt") + xlab("Year") +
ggtitle("Price of Log xt with 1 diff vs. Years")
# Because of acf and pacf looking good, I think the model is perfect, if this was not the case I would use eacf to suggests a fits
## suggests fits
TSA::eacf(diff(log_xt,1))
install.packages("TSA").
install.packages("TSA")
library("astsa")
library("fpp2")
# Q2 60 marks
autoplot(ts(xt, frequency = 1)) +
ylab("Price of xt") +xlab("Year") +
ggtitle("Price of xt vs. Years")
log_xt <- log(xt)
autoplot(ts(log_xt, frequency = 1)) +
ylab("Price of xt") + xlab("Year") +
ggtitle("Price of Log xt vs. Years")
ggPacf(log_chicken) + ggtitle("PACF for xt")
ggAcf(log_chicken) + ggtitle("ACF for xt")
# Since ACF is weird too many components suggests that there is AR component, looking at PACF confirms this. implies that ARMA(1,0) will be good
# doing one diff to remove trend
ggPacf(diff(log_xt, 1)) + ggtitle("PACF for xt")
ggAcf(diff(log_xt,1)) + ggtitle("ACF for xt")
autoplot(ts(diff(log_xt,1), frequency = 1)) +
ylab("Price of xt") + xlab("Year") +
ggtitle("Price of Log xt with 1 diff vs. Years")
# Because of acf and pacf looking good, I think the model is perfect, if this was not the case I would use eacf to suggests a fits
## suggests fits
TSA::eacf(diff(log_xt,1))
## from the we confrim that ARIMA(0,1,0) is good fit
# the verify the model
log(xt) %>% auto.arima(seasonal = TRUE, ic = c("aic"))
log(xt) %>% auto.arima(seasonal = TRUE, ic = c("bic"))
# visualization
autoplot(ts(log(xt), frequency = 52)) +
ylab("Price of log(xt)") +xlab("Year") +
ggtitle("Price of log(xt) vs. Years")
ggAcf(log(xt)) + ggtitle("ACF for log(xt)")
ggPacf(log(xt)) + ggtitle("PACF for log(xt)")
## Because PACF is fine but ACF is a bit bad, this suggests MA with 4 components and PACF with 1, however the series is not stationary
### one diff
autoplot(ts(diff(log(xt),1), frequency = 52)) +
ylab("Price of log(xt)") +xlab("Year") +
ggtitle("Price of log(xt) vs. Years")
ggAcf(diff(log(xt),1)) + ggtitle("ACF for log(xt)")
ggPacf(diff(log(xt),1)) + ggtitle("PACF for log(xt)")
## PACF suggest no components AR but ACF suggets a weak single component, but the series is not stationary according to time series plot (line 57), thus we will take one mre diff
diff_log_xt <- diff(log(xt),1)
autoplot(ts(diff(diff_log_series,1), frequency = 52)) +
ylab("Price of log(xt)") +xlab("Year") +
ggtitle("Price of with diff diff log(xt) vs. Years")
library("astsa")
library("fpp2")
# Q2 60 marks
autoplot(ts(xt, frequency = 1)) +
ylab("Price of xt") +xlab("Year") +
ggtitle("Price of xt vs. Years")
log_xt <- log(xt)
autoplot(ts(log_xt, frequency = 1)) +
ylab("Price of xt") + xlab("Year") +
ggtitle("Price of Log xt vs. Years")
ggPacf(log_xt) + ggtitle("PACF for xt")
ggAcf(log_xt) + ggtitle("ACF for xt")
# Since ACF is weird too many components suggests that there is AR component, looking at PACF confirms this. implies that ARMA(1,0) will be good
# doing one diff to remove trend
ggPacf(diff(log_xt, 1)) + ggtitle("PACF for xt")
ggAcf(diff(log_xt,1)) + ggtitle("ACF for xt")
autoplot(ts(diff(log_xt,1), frequency = 1)) +
ylab("Price of xt") + xlab("Year") +
ggtitle("Price of Log xt with 1 diff vs. Years")
# Because of acf and pacf looking good, I think the model is perfect, if this was not the case I would use eacf to suggests a fits
## suggests fits
TSA::eacf(diff(log_xt,1))
## from the we confrim that ARIMA(0,1,0) is good fit
# the verify the model
log(xt) %>% auto.arima(seasonal = TRUE, ic = c("aic"))
log(xt) %>% auto.arima(seasonal = TRUE, ic = c("bic"))
load("C:/Users/TEJASHREE/Desktop/TimeSeries/monthlydata (1).Rdata")
library("astsa")
library("fpp2")
# Q2 60 marks
autoplot(ts(xt, frequency = 1)) +
ylab("Price of xt") +xlab("Year") +
ggtitle("Price of xt vs. Years")
log_xt <- log(xt)
autoplot(ts(log_xt, frequency = 1)) +
ylab("Price of xt") + xlab("Year") +
ggtitle("Price of Log xt vs. Years")
ggPacf(log_xt) + ggtitle("PACF for xt")
ggAcf(log_xt) + ggtitle("ACF for xt")
# Since ACF is weird too many components suggests that there is AR component, looking at PACF confirms this. implies that ARMA(1,0) will be good
# doing one diff to remove trend
ggPacf(diff(log_xt, 1)) + ggtitle("PACF for xt")
ggAcf(diff(log_xt,1)) + ggtitle("ACF for xt")
autoplot(ts(diff(log_xt,1), frequency = 1)) +
ylab("Price of xt") + xlab("Year") +
ggtitle("Price of Log xt with 1 diff vs. Years")
# Because of acf and pacf looking good, I think the model is perfect, if this was not the case I would use eacf to suggests a fits
## suggests fits
TSA::eacf(diff(log_xt,1))
## from the we confrim that ARIMA(0,1,0) is good fit
# the verify the model
log(xt) %>% auto.arima(seasonal = TRUE, ic = c("aic"))
log(xt) %>% auto.arima(seasonal = TRUE, ic = c("bic"))
# visualization
autoplot(ts(log(xt), frequency = 52)) +
ylab("Price of log(xt)") +xlab("Year") +
ggtitle("Price of log(xt) vs. Years")
ggAcf(log(xt)) + ggtitle("ACF for log(xt)")
ggPacf(log(xt)) + ggtitle("PACF for log(xt)")
## Because PACF is fine but ACF is a bit bad, this suggests MA with 4 components and PACF with 1, however the series is not stationary
### one diff
autoplot(ts(diff(log(xt),1), frequency = 52)) +
ylab("Price of log(xt)") +xlab("Year") +
ggtitle("Price of log(xt) vs. Years")
ggAcf(diff(log(xt),1)) + ggtitle("ACF for log(xt)")
ggPacf(diff(log(xt),1)) + ggtitle("PACF for log(xt)")
## PACF suggest no components AR but ACF suggets a weak single component, but the series is not stationary according to time series plot (line 57), thus we will take one mre diff
diff_log_xt <- diff(log(xt),1)
autoplot(ts(diff(diff_log_xt,1), frequency = 52)) +
ylab("Price of log(xt)") +xlab("Year") +
ggtitle("Price of with diff diff log(xt) vs. Years")
ggAcf(diff(diff_log_xt,1)) + ggtitle("ACF for diff diff log(xt)")
ggPacf(diff(diff_log_xt,1)) + ggtitle("PACF for diff diff log(xt)")
## but ofcourse this is not good from the plots, we stick to one diff
## now getting suggestions using eacfs
TSA::eacf(diff(log(xt),1))
## EACF suggests that ARIMA(0,1,0), ARIMA(0,1,1) and ARIMA(0,1,2) are vaiable fits
modelA <- sarima(log(xt), p=0,d=1,q=0, P=0, D=0, Q=0, S=0)
modelB <- sarima(log(xt), p=0,d=1,q=1, P=0, D=0, Q=0, S=0)
modelC <- sarima(log(xt), p=0,d=1,q=2, P=0, D=0, Q=0, S=0)
### the blue line should be close to the diagonal, the p values should be high
## ADF test to test if the series is stationary
tseries::adf.test(modelA$fit$residuals)
tseries::adf.test(modelB$fit$residuals)
tseries::adf.test(modelC$fit$residuals)
## AIC value and BIC value
AIC(modelA$fit) #2nd best
AIC(modelB$fit) #3rd best
AIC(modelC$fit) #best
BIC(modelA$fit) # best
BIC(modelB$fit) # last
BIC(modelC$fit) # 2nd best
#### Choosing ARIMA(0,1,2) since it makes sense using ACF and PACf plots and is the simplest model
## get the exact equation of the model
## Summary
summary(modelC$fit)
# model equation is given by delx_t = w_t
### forecasting
#Forecasting
sarima.for(log(xt), p=0,q=1,d=0, P=0, D=0, Q=0, S=0, n.ahead = 20)
values <- sarima.for(log(xt), p=0,q=1,d=0, P=0, D=0, Q=0, S=0, n.ahead = 20)
exp(values$pred)
# the verify the model
log(xt) %>% auto.arima(seasonal = TRUE, ic = c("aic"))
log(xt) %>% auto.arima(seasonal = TRUE, ic = c("bic"))
#### kalman filter
# generate  dataset
num = 50
y = rnorm(100,0,1)
# A and C according to ksmooth documentation
C = matrix(c(0.5, 0.8, 0, 0), byrow = TRUE, nrow = 2, ncol = 2)
A = matrix(c(1, 0.2), byrow = TRUE, nrow = 1, ncol = 2)
ks = Ksmooth0(num , y, A=A, mu0=rep(0,1), Sigma0=rep(0,1), Phi=C, cQ=1, cR=1)
# generate dataset
num = 50
y = rnorm(100,0,1)
# A and C according to ksmooth documentation
C = matrix(c(0.5, 0.8, 0, 0), byrow = TRUE, nrow = 2, ncol = 2)
A = matrix(c(1, 0.2), byrow = TRUE, nrow = 1, ncol = 2)
ks = Ksmooth0(num , y, A=A, mu0=rep(0,1), Sigma0=rep(0,1), Phi=C, cQ=1, cR=1)
#inputs of kalman_filter
#Times: Number of time steps
#R: Covariate matrix in the transition model
#y: All observations
#mu0: first mean
#sigma0: first varience
#A: How the mean of z_t will be affected by z_(t-1) Used in transition model
#C: Scale the mean (z_t) in the emission model
#Q: Covariate matrix in the emission model
kalman_filter <- function(Times, y, A, mu0, Sigma0, C, Q, R) {
mu <- rep(1,Times)
sigma <- rep(1,Times)
unweight <- rep(1,Times)
sigma_unweight <- rep(1,Times)
gainkalman <- rep(1,Times)
mu[1] <- mu0
sigma[1] <- Sigma0
for (t in 2:Times) {
9
unweight[t] <- A[t]%*%mu[t - 1]
sigma_unweight[t] <- A[t]%*%sigma[t - 1]%*%t(A[t]) + Q[t]
gainkalman[t] <- sigma_unweight[t]%*%t(C[t]) %*% solve(C[t]%*%sigma_unweight[t]%*%t(C[t] + R[t]))
mu[t] <- unweight[t] + gainkalman[t]%*%(y[t] - C[t]%*%unweight[t])
sigma[t] <- (1 - gainkalman[t]%*%C[t])%*%sigma_unweight[t]
}
return (list(mu = mu, sigma = sigma))
}
set.seed(1)
num = 50
w = rnorm(num+1,0,1)
v = rnorm(num ,0,1)
mu = cumsum(w)
y = mu[-1] + v
KS_fun = kalman_filter(Times=num , y=y, A=rep(1,num), mu0=0, Sigma0=1,
C=rep(1,num), Q=rep(1,num), R=rep(1,num))
plot(time , mu[-1], main="predict", ylim=c(-5,10))
lines(time ,y,col="red")
#inputs of kalman_filter
#Times: Number of time steps
#R: Covariate matrix in the transition model
#y: All observations
#mu0: first mean
#sigma0: first varience
#A: How the mean of z_t will be affected by z_(t-1) Used in transition model
#C: Scale the mean (z_t) in the emission model
#Q: Covariate matrix in the emission model
kalman_filter <- function(Times, y, A, mu0, Sigma0, C, Q, R) {
mu <- rep(1,Times)
sigma <- rep(1,Times)
unweight <- rep(1,Times)
sigma_unweight <- rep(1,Times)
gainkalman <- rep(1,Times)
mu[1] <- mu0
sigma[1] <- Sigma0
for (t in 2:Times) {
unweight[t] <- A[t]%*%mu[t - 1]
sigma_unweight[t] <- A[t]%*%sigma[t - 1]%*%t(A[t]) + Q[t]
gainkalman[t] <- sigma_unweight[t]%*%t(C[t]) %*% solve(C[t]%*%sigma_unweight[t]%*%t(C[t] + R[t]))
mu[t] <- unweight[t] + gainkalman[t]%*%(y[t] - C[t]%*%unweight[t])
sigma[t] <- (1 - gainkalman[t]%*%C[t])%*%sigma_unweight[t]
}
return (list(mu = mu, sigma = sigma))
}
set.seed(1)
num = 50
w = rnorm(num+1,0,1)
v = rnorm(num ,0,1)
mu = cumsum(w)
y = mu[-1] + v
KS_fun = kalman_filter(Times=num , y=y, A=rep(1,num), mu0=0, Sigma0=1,
C=rep(1,num), Q=rep(1,num), R=rep(1,num))
plot(time , mu[-1], main="predict", ylim=c(-5,10))
lines(time ,y,col="red")
?load
xt <- load("monthlydata(1).Rdata")
xt <- load("monthlydata(1).Rdata")
xt <- load("monthlydata (1).Rdata")
xt
setwd("C:/Users/TEJASHREE/Desktop/teju/Period 2/Machine Learning/Lab Assignments/Block1/Lab1/New Lab")
knitr::opts_chunk$set(echo = TRUE)
library(glmnet)
data <- read.csv(file = 'tecator.csv')
data <- data[,-1]
n=dim(data)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.5))
train=data[id,]
test=data[-id,]
para <- lm(Fat~.,data = train[,-c(102,103)]) #calculate model
y_hat_tr <- predict(para,newx=as.matrix(train[,1:100]),type="response") #predict train value
err_tr <- y_hat_tr-train[,101] #train residuals
22
y_hat_te <- predict(para,newdata = test[,1:100],type="response") #predict test value
err_te <- y_hat_te-test[,101] #test residuals
sd(err_tr)
sd(err_te)
plot(1:107,err_tr,col="blue",xlim = c(1,108),ylim = c(-50,100),
xlab = "number of sample",ylab = "error for both sets",main = "residuals")
points(1:108,err_te,col="red")
legend(0,80,legend=c("training data","test data"),col=c("blue","red"),lty=1,cex=0.8)
err_tr
